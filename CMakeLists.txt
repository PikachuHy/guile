cmake_minimum_required(VERSION 3.16)
project(guile VERSION 1.8.8 LANGUAGES C)
set(GUILE_MAJOR_VERSION ${guile_VERSION_MAJOR})
set(GUILE_MINOR_VERSION ${guile_VERSION_MINOR})
set(GUILE_MICRO_VERSION ${guile_VERSION_PATCH})
set(CMAKE_C_STANDARD 90)
set(CMAKE_INCLUDE_CURRENT_DIR ON)
include(CheckTypeSize)
check_type_size("char" SIZEOF_CHAR)
check_type_size("float" SIZEOF_FLOAT)
check_type_size("int" SIZEOF_INT)
check_type_size("intmax_t" SIZEOF_INTMAX_T)
check_type_size("intptr_t" SIZEOF_INTPTR_T)
check_type_size("long" SIZEOF_LONG)
check_type_size("long long" SIZEOF_LONG_LONG)
check_type_size("off_t" SIZEOF_OFF_T)
check_type_size("ptrdiff_t" SIZEOF_PTRDIFF_T)
check_type_size("short" SIZEOF_SHORT)
check_type_size("size_t" SIZEOF_SIZE_T)
check_type_size("uintptr_t" SIZEOF_UINTPTR_T)
check_type_size("unsigned char" SIZEOF_UNSIGNED_CHAR)
check_type_size("unsigned int" SIZEOF_UNSIGNED_INT)
check_type_size("unsigned long" SIZEOF_UNSIGNED_LONG)
check_type_size("unsigned long long" SIZEOF_UNSIGNED_LONG_LONG)
check_type_size("unsigned short" SIZEOF_UNSIGNED_SHORT)
check_type_size("unsigned __int64" SIZEOF_UNSIGNED___INT64)
check_type_size("void *" SIZEOF_VOID_P)
check_type_size("__int64" SIZEOF___INT64)
if(NOT SIZEOF___INT64)
    set(SIZEOF___INT64 0)
endif()
if(NOT SIZEOF_UNSIGNED___INT64)
    set(SIZEOF_UNSIGNED___INT64 0)
endif()
include (CheckIncludeFile)
check_include_file (utime.h HAVE_UTIME_H)
check_include_file (assert.h HAVE_ASSERT_H)
include (CheckFunctionExists)
check_function_exists (strncasecmp HAVE_STRNCASECMP)
check_function_exists (strptime HAVE_STRPTIME)
check_function_exists (asinh HAVE_ASINH)
check_function_exists (atanh HAVE_ATANH)
check_function_exists (atexit HAVE_ATEXIT)
check_function_exists (bcopy HAVE_BCOPY)
check_function_exists (cexp HAVE_CEXP)
include_directories(${CMAKE_BINARY_DIR})
configure_file (${CMAKE_SOURCE_DIR}/config.h.cmake ${CMAKE_BINARY_DIR}/config.h)
configure_file (${CMAKE_SOURCE_DIR}/libguile/version.h.cmake ${CMAKE_BINARY_DIR}/libguile/version.h)
add_subdirectory(libguile)
add_subdirectory(examples)
add_executable(guile-main main.c)
target_link_libraries(guile-main guile)